<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:websocket="http://www.springframework.org/schema/websocket"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd">
    <context:component-scan base-package="com.smart.chapter17.web"/>
    <!--这个一定要填写,该标签会创建并注册一个默认的DefaultAnnotationHandlerMapping和一个RequestMappingHandlerAdapter-->
    <!--除此之外，该标签会注册一个默认的ConversionService,即FormattingConversionServiceFactoryBean-->
    <!--The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler-->
    <!--会默认装配org.springframework.validation.beanvalidation.LocalValidDatorFactoryBean-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <!--默认四个-->
            <!--<bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="writeAcceptCharset" value="false"/>
            </bean>
            <bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter"/>
            <bean class="org.springframework.http.converter.xml.SourceHttpMessageConverter"/>
            <bean class="org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter"/>-->
            <!--新增-->
            <!--<bean class="org.springframework.http.converter.BufferedImageHttpMessageConverter"/>-->
            <!--处理xml格式的请求或相应信息-->
            <bean class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
                <property name="marshaller" ref="xmlMarshaller"/>
                <property name="unmarshaller" ref="xmlMarshaller"/>
            </bean>
            <!--处理json格式的请求或相应消息-->
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!--<mvc:default-servlet-handler/>-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="order" value="100"/>
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--RequestMappingHandlerAdapter，默认有四个MessageConverter-->
    <!--若需要装配其他类型的HttpMessageConverter，如下。如果再配置文件中显示的定义了RequestMappingHandlerAdapter则springMVC会覆盖默认的RequestMappingHandlerAdapter-->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <!--<property name="messageConverters">
            <list>
                &lt;!&ndash;默认四个&ndash;&gt;
                <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                    <property name="writeAcceptCharset" value="false"/>
                </bean>
                <bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter"/>
                <bean class="org.springframework.http.converter.xml.SourceHttpMessageConverter"/>
                <bean class="org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter"/>
                &lt;!&ndash;新增&ndash;&gt;
                <bean class="org.springframework.http.converter.BufferedImageHttpMessageConverter"/>
                &lt;!&ndash;处理xml格式的请求或相应信息&ndash;&gt;
                <bean class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
                    <property name="marshaller" ref="xmlMarshaller"/>
                    <property name="unmarshaller" ref="xmlMarshaller"/>
                </bean>
                &lt;!&ndash;处理json格式的请求或相应消息&ndash;&gt;
                <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
            </list>
        </property>-->
        <property name="webBindingInitializer">
            <bean class="com.smart.chapter17.web.MyBindingInitializer"/>
        </property>
    </bean>
    <!--声明Marshaller，使用XStream技术-->
    <bean id="xmlMarshaller" class="org.springframework.oxm.xstream.XStreamMarshaller">
        <property name="streamDriver">
            <!--使用STAX对xml消息进行处理，STAX占用内存少，相应速度也很快-->
            <bean class="com.thoughtworks.xstream.io.xml.StaxDriver"/>
        </property>
        <!--使用XStream的注解定义xml转换规则，使用XStream注解的类在此声明-->
        <property name="annotatedClasses">
            <list>
                <value>com.smart.chapter17.domain.User</value>
            </list>
        </property>
    </bean>

    <!--Conversions-->
    <!--org.springframework.context.support.ConversionServiceFactoryBean-->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <bean class="com.smart.chapter17.domain.StringToUserConverter"/>
            </set>
        </property>
    </bean>

    <!--国际化资源-->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basenames">
            <array>
                <value>i18n.message</value>
                <value>i18n.content</value>
            </array>
        </property>
    </bean>

    <!--<bean id="contentNegotiationManager"
          class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean"
          p:ignoreAcceptHeader="true"
          p:favorPathExtension="false"
          p:favorParameter="true"
          p:parameterName="format"
          p:defaultContentType="text/html">
        <property name="mediaTypes">
            <value>
                html=text/html
                xml=application/xml
                json=application/json
            </value>
        </property>
    </bean>-->

    <!--FreeMarker基础设施及视图解析器配置-->
    <bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath" value="/WEB-INF/ftl/"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="freemarkerSettings">
            <props>
                <prop key="classic_compatible">true</prop>
            </props>
        </property>
    </bean>
    <bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="order" value="5"/>
        <property name="suffix" value=".ftl"/>
        <property name="contentType" value="text/html; charset=utf-8"/>
    </bean>

    <!--Excel及PDF视图解析器配置-->
    <bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
        <property name="order" value="10"/>
    </bean>
    <bean id="userListExcel" class="com.smart.chapter17.web.UserListExcelView"/>
    <bean id="userListPdf" class="com.smart.chapter17.web.UserListPdfView"/>
    <!--Xml及JSON视图解析器配置-->
    <bean id="userListXml" class="org.springframework.web.servlet.view.xml.MarshallingView">
        <property name="modelKey" value="userList"/>
        <property name="marshaller" ref="xmlMarshaller"/>
    </bean>
    <bean id="userListJson" class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
        <property name="modelKey" value="userList"/>
    </bean>
    <!--Xml文件或国际化资源文件定义视图-->
    <bean class="org.springframework.web.servlet.view.XmlViewResolver">
        <!--默认情况下XmlViewResolver在WEB-INF/views.xml中查找视图Bean的定义文件，在chapter17_views.xml文件中定义的Bean不能被Spring Web上下文的其他Bean引用
        它是被XmlViewResolver独享的-->
        <property name="location" value="classpath:/chapter17-views.xml"/>
        <property name="order" value="15"/>
    </bean>
    <bean class="org.springframework.web.servlet.view.ResourceBundleViewResolver">
        <property name="order" value="20"/>
        <!--对应views_zh_CN.properties-->
        <property name="basename" value="i18n/views"/>
    </bean>

    <!--混合使用多种视图技术-->
    <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <property name="ignoreAcceptHeader" value="true"/>
        <property name="favorPathExtension" value="false"/>
        <property name="favorParameter" value="true"/>
        <property name="parameterName" value="content"/>
        <property name="defaultContentType" value="text/html"/>
        <property name="mediaTypes">
            <props>
                <prop key="html">text/html</prop>
                <prop key="xml">application/xml</prop>
                <prop key="json">application/json</prop>
            </props>
        </property>
    </bean>
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="order" value="0"/>
        <property name="contentNegotiationManager" ref="contentNegotiationManager"/>
        <property name="defaultViews">
            <list>
                <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" p:modelKey="userListC"/>
                <bean class="org.springframework.web.servlet.view.xml.MarshallingView" p:modelKey="userListC" p:marshaller-ref="xmlMarshaller"/>
            </list>
        </property>
    </bean>

    <!--本地化解析器-->
    <bean id="cookieLocaleResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
        <property name="cookieName" value="clientLanguage"/>
        <property name="cookieMaxAge" value="100000"/>
        <property name="cookiePath" value="/"/>
        <property name="defaultLocale" value="zh_CN"/>
    </bean>
    <!--SessionLocalResolver-->
    <bean class="org.springframework.web.servlet.i18n.SessionLocaleResolver"/>
    <!--LocaleChangeInterceptor-->
    <mvc:interceptors>
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"/>
    </mvc:interceptors>

    <!--文件上传 id必须为multipartResolver，不然报错HTTP Status 400 – Bad Request-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"/>
        <!--5M-->
        <property name="maxUploadSizePerFile" value="5242880"/>
        <property name="uploadTempDir" value="file:/tmp"/>
    </bean>

    <!--静态资源-->
    <!--default-servlet-handler只能处理webapp下面的静态资源，不能处理WEB-INF下的静态资源-->
    <!--<mvc:default-servlet-handler/>-->

    <bean id="resourcePathExposer" class="com.smart.chapter17.web.ResourcePathExposer" init-method="init"/>
    <!--其中location若配置/WEB-INF/img/则会被spring MVC拦截，所以不见静态资源放置WEB-INF目录下，缓存时期，一年31536000，通过版本控制来解决版本发布问题-->
    <mvc:resources mapping="#{resourcePathExposer.resourceRoot}/**" location="/resources/, classpath:/META-INF/public-web-resources/" cache-period="0"/>
    <!--拦截器-->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/user/*"/>
            <bean class="com.smart.chapter17.web.MyInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>
</beans>